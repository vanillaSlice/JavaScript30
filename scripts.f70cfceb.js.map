{"version":3,"sources":["23 - Speech Synthesis/scripts/index.js"],"names":["utterance","voicesDropdownElement","document","querySelector","rateElement","pitchElement","textElement","stopBtn","speakBtn","voices","populateVoices","voiceOptions","speechSynthesis","getVoices","filter","voice","lang","includes","map","name","join","innerHTML","toggle","startOver","cancel","SpeechSynthesisUtterance","find","value","rate","pitch","text","speak","undefined","onvoiceschanged","addEventListener"],"mappings":";AAIA,IAWIA,EAXEC,EAAwBC,SAASC,cAAc,cAC/CC,EAAcF,SAASC,cAAc,YACrCE,EAAeH,SAASC,cAAc,aACtCG,EAAcJ,SAASC,cAAc,YACrCI,EAAUL,SAASC,cAAc,YACjCK,EAAWN,SAASC,cAAc,aAOpCM,EAAS,GAMb,SAASC,IAEDC,IAAAA,GADNF,EAASG,gBAAgBC,aAEtBC,OAAO,SAAAC,GAASA,OAAAA,EAAMC,KAAKC,SAAS,QACpCC,IAAI,SAAAH,GAA2BA,MAAAA,kBAAAA,OAAAA,EAAMI,KAASJ,MAAAA,OAAAA,EAAMI,KAASJ,MAAAA,OAAAA,EAAMC,KAA1D,gBACTI,KAAK,IACRnB,EAAsBoB,UAAYV,EAGpC,SAASW,IAAOC,IAAAA,IAAY,UAAA,OAAA,QAAA,IAAA,UAAA,KAAA,UAAA,GAC1BX,gBAAgBY,SACZD,KACFvB,EAAY,IAAIyB,0BACNV,MAAQN,EAAOiB,KAAK,SAAAX,GAASA,OAAAA,EAAMI,OAASlB,EAAsB0B,QAC5E3B,EAAU4B,KAAOxB,EAAYuB,MAC7B3B,EAAU6B,MAAQxB,EAAasB,MAC/B3B,EAAU8B,KAAOxB,EAAYqB,MAC7Bf,gBAAgBmB,MAAM/B,IAQ1BU,SACwCsB,IAApCpB,gBAAgBqB,iBAClBrB,gBAAgBsB,iBAAiB,gBAAiBxB,GAEpDT,EAAsBiC,iBAAiB,SAAUZ,GACjDlB,EAAY8B,iBAAiB,SAAUZ,GACvCjB,EAAa6B,iBAAiB,SAAUZ,GACxChB,EAAY4B,iBAAiB,SAAUZ,GACvCd,EAAS0B,iBAAiB,QAASZ,GACnCf,EAAQ2B,iBAAiB,QAAS,WAAMZ,OAAAA,GAAO","file":"scripts.f70cfceb.js","sourceRoot":"../src","sourcesContent":["/*\n * Elements\n */\n\nconst voicesDropdownElement = document.querySelector('.js-voices');\nconst rateElement = document.querySelector('.js-rate');\nconst pitchElement = document.querySelector('.js-pitch');\nconst textElement = document.querySelector('.js-text');\nconst stopBtn = document.querySelector('.js-stop');\nconst speakBtn = document.querySelector('.js-speak');\n\n/*\n * Variables\n */\n\nlet utterance;\nlet voices = [];\n\n/*\n * Functions\n */\n\nfunction populateVoices() {\n  voices = speechSynthesis.getVoices();\n  const voiceOptions = voices\n    .filter(voice => voice.lang.includes('en'))\n    .map(voice => `<option value=\"${voice.name}\">${voice.name} (${voice.lang})</option>`)\n    .join('');\n  voicesDropdownElement.innerHTML = voiceOptions;\n}\n\nfunction toggle(startOver = true) {\n  speechSynthesis.cancel();\n  if (startOver) {\n    utterance = new SpeechSynthesisUtterance();\n    utterance.voice = voices.find(voice => voice.name === voicesDropdownElement.value);\n    utterance.rate = rateElement.value;\n    utterance.pitch = pitchElement.value;\n    utterance.text = textElement.value;\n    speechSynthesis.speak(utterance);\n  }\n}\n\n/*\n * Initialise\n */\n\npopulateVoices();\nif (speechSynthesis.onvoiceschanged !== undefined) {\n  speechSynthesis.addEventListener('voiceschanged', populateVoices);\n}\nvoicesDropdownElement.addEventListener('change', toggle);\nrateElement.addEventListener('change', toggle);\npitchElement.addEventListener('change', toggle);\ntextElement.addEventListener('change', toggle);\nspeakBtn.addEventListener('click', toggle);\nstopBtn.addEventListener('click', () => toggle(false));\n"]}